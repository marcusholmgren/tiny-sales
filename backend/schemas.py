from pydantic import BaseModel, Field
from typing import Optional
import datetime

# Base schema for common inventory item attributes
class InventoryItemBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=255, description="Name of the inventory item")
    quantity: int = Field(default=0, ge=0, description="Current stock quantity of the item")

# Schema for creating a new inventory item
# public_id is generated by the server
# created_at, updated_at are set by the server
# deleted_at is not set on creation
class InventoryItemCreate(InventoryItemBase):
    pass

# Schema for updating an existing inventory item
# All fields are optional for partial updates
class InventoryItemUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=1, max_length=255, description="New name of the inventory item")
    quantity: Optional[int] = Field(None, ge=0, description="New stock quantity of the item")

# Schema for representing an inventory item in API responses
class InventoryItemResponse(InventoryItemBase):
    public_id: str = Field(..., description="Public unique identifier for the item (KSUID)")
    created_at: datetime.datetime = Field(..., description="Timestamp of when the item was created")
    updated_at: datetime.datetime = Field(..., description="Timestamp of when the item was last updated")
    # deleted_at: Optional[datetime.datetime] = Field(None, description="Timestamp of when the item was soft-deleted, if applicable")

    class Config:
        from_attributes = True # Pydantic V2 way to enable ORM mode

# Schema for a paginated list of inventory items
class PaginatedInventoryResponse(BaseModel):
    items: list[InventoryItemResponse]
    total: int
    page: int
    size: int
    # pages: int # Can be calculated as ceil(total / size)

    class Config:
        from_attributes = True
