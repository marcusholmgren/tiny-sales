import datetime
import logging
from fastapi import APIRouter, HTTPException, status, Query, Depends # Added Depends
from typing import Optional, List, Annotated # Added List and Annotated

# Relative imports for when this router is part of the 'backend' package
from ..models import InventoryItem, Category, User # Added User
from ..schemas import (
    InventoryItemCreate,
    InventoryItemUpdate,
    InventoryItemResponse,
    PaginatedInventoryResponse,
    CategoryResponse,
    CategoryCreate,
    CategoryUpdate
)
from .. import auth # Added auth import

logger = logging.getLogger(__name__)


router = APIRouter(
    prefix="/inventory",
    tags=["Inventory"],
    responses={404: {"description": "Not found"}},
)

items = []

def to_inventory_response(inventory_item: InventoryItem) -> InventoryItemResponse:
    return InventoryItemResponse(
        name=inventory_item.name,
        quantity=inventory_item.quantity,
        public_id=inventory_item.public_id,
        created_at=inventory_item.created_at,
        updated_at=inventory_item.updated_at,
        # category field will be populated by prefetching in the routes or by individual loading.
        # For now, let's assume it's preloaded or handled in the route.
        # If not preloaded, inventory_item.category will be None or raise an error if accessed directly without await.
        # We will adjust this to properly serialize the category.
        category=CategoryResponse.model_validate(inventory_item.category) if inventory_item.category else None
    )

@router.post(
    "/",
    response_model=InventoryItemResponse,
    status_code=status.HTTP_201_CREATED,
    summary="Create a new inventory item"
)
async def create_inventory_item(
    item_in: InventoryItemCreate,
    current_admin: Annotated[User, Depends(auth.get_current_active_admin_user)]
):
    """
    Create a new inventory item.
    - **name**: Name of the item (required)
    - **quantity**: Stock quantity (defaults to 0 if not provided in schema, but schema requires it)
    """
    # public_id is generated by the model's default factory (generate_ksuid)
    logger.info("Creating item: %s", item_in)

    item_data = item_in.model_dump()
    category_public_id = item_data.pop("category_id", None)
    category_instance = None

    if category_public_id:
        category_instance = await Category.get_or_none(public_id=category_public_id)
        if not category_instance:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Category with public_id {category_public_id} not found"
            )

    try:
        # Create inventory item, associating category if found
        inventory_item = await InventoryItem.create(**item_data, category=category_instance)
        # No explicit save needed for .create(), it saves.
        # Need to prefetch category for the response
        await inventory_item.fetch_related('category')
        return to_inventory_response(inventory_item)
    except Exception as e:
        logger.error(f"Error creating inventory item: {e}", exc_info=True)
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Failed to create inventory item.")

@router.get(
    "/",
    response_model=PaginatedInventoryResponse,
    summary="List all active inventory items"
)
async def list_inventory_items(
    page: int = Query(1, ge=1, description="Page number"),
    size: int = Query(10, ge=1, le=100, description="Number of items per page"),
    category_public_id: Optional[str] = Query(None, description="Public ID of the category to filter by")
):
    """
    Retrieve a paginated list of inventory items that have not been soft-deleted.
    Optionally filters by category public ID.
    """
    offset = (page - 1) * size
    filters = {"deleted_at__isnull": True}
    if category_public_id:
        # Ensure the category exists and is valid, or handle potential error
        category = await Category.get_or_none(public_id=category_public_id)
        if not category:
            raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f"Category with public_id {category_public_id} not found")
        filters["category_id"] = category.id # Filter by internal category ID

    # Query for items and total count separately
    # Prefetch category for efficient serialization
    items_query = InventoryItem.filter(**filters).prefetch_related('category').order_by('name').offset(offset).limit(size)
    total_count_query = InventoryItem.filter(**filters).count()

    items_db = await items_query
    total = await total_count_query

    # Convert DB models to Pydantic response models
    response_items = [to_inventory_response(item) for item in items_db]

    return PaginatedInventoryResponse(
        items=response_items,
        total=total,
        page=page,
        size=size,
        # category_filter=category_public_id # This was incorrectly added to PaginatedInventoryResponse schema earlier, removing
    )

@router.get(
    "/{item_public_id}",
    response_model=InventoryItemResponse,
    summary="Get a specific inventory item by its public ID"
)
async def get_inventory_item(item_public_id: str):
    """
    Get a single inventory item by its `public_id`.
    Returns 404 if the item is not found or has been soft-deleted.
    """
    inventory_item = await InventoryItem.get_or_none(public_id=item_public_id, deleted_at__isnull=True)
    if not inventory_item:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Inventory item not found or has been deleted"
        )
    # Prefetch category for the response
    await inventory_item.fetch_related('category')
    return to_inventory_response(inventory_item)

@router.put(
    "/{item_public_id}",
    response_model=InventoryItemResponse,
    summary="Update an inventory item"
)
async def update_inventory_item(
    item_public_id: str,
    item_in: InventoryItemUpdate,
    current_admin: Annotated[User, Depends(auth.get_current_active_admin_user)]
):
    """
    Update an inventory item's name or quantity.
    Only updates fields provided in the request body.
    Returns 404 if the item is not found or has been soft-deleted.
    """
    inventory_item = await InventoryItem.get_or_none(public_id=item_public_id, deleted_at__isnull=True)
    if not inventory_item:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Inventory item not found or has been deleted"
        )

    update_data = item_in.model_dump(exclude_unset=True)
    if not update_data:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="No fields provided for update"
        )

    category_public_id = update_data.pop("category_id", "NOT_SET") # Use a sentinel to distinguish unset from None

    if category_public_id != "NOT_SET": # category_id was provided in the payload
        if category_public_id is None: # Explicitly set to null
            inventory_item.category = None
        else:
            category_instance = await Category.get_or_none(public_id=category_public_id)
            if not category_instance:
                raise HTTPException(
                    status_code=status.HTTP_404_NOT_FOUND,
                    detail=f"Category with public_id {category_public_id} not found"
                )
            inventory_item.category = category_instance

    # Update other fields
    for key, value in update_data.items():
        setattr(inventory_item, key, value)

    try:
        await inventory_item.save()
        # Prefetch category for the response
        await inventory_item.fetch_related('category')
        return to_inventory_response(inventory_item)
    except Exception as e:
        logger.error(f"Error updating inventory item {item_public_id}: {e}", exc_info=True)
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Failed to update inventory item.")

@router.delete(
    "/{item_public_id}",
    status_code=status.HTTP_204_NO_CONTENT,
    summary="Soft delete an inventory item"
)
async def delete_inventory_item(
    item_public_id: str,
    current_admin: Annotated[User, Depends(auth.get_current_active_admin_user)]
):
    """
    Soft delete an inventory item by setting its `deleted_at` timestamp.
    Returns 404 if the item is not found or has already been soft-deleted.
    """
    inventory_item = await InventoryItem.get_or_none(public_id=item_public_id, deleted_at__isnull=True)
    if not inventory_item:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Inventory item not found or already deleted"
        )

    inventory_item.deleted_at = datetime.datetime.now(datetime.timezone.utc) # Use timezone-aware UTC time
    await inventory_item.save()

    # No content to return for 204
    return None


# --- Category Endpoints ---

# Removed category_router definition, will use main `router`

def to_category_response(category: Category) -> CategoryResponse: # This helper is fine
    return CategoryResponse.model_validate(category)


@router.post( # Changed to @router
    "/categories/", # Added /categories prefix
    response_model=CategoryResponse,
    status_code=status.HTTP_201_CREATED,
    summary="Create a new category",
    tags=["Categories"] # Added Categories tag
)
async def create_category(
    category_in: CategoryCreate,
    current_admin: Annotated[User, Depends(auth.get_current_active_admin_user)]
):
    """
    Create a new category.
    - **name**: Name of the category (required, unique)
    - **description**: Optional description for the category
    """
    try:
        category = await Category.create(**category_in.model_dump())
        return to_category_response(category)
    except Exception as e: # Catching generic exception, ideally more specific (e.g., IntegrityError for unique name)
        logger.error(f"Error creating category: {e}", exc_info=True)
        if "UNIQUE constraint failed" in str(e): # Basic check for unique constraint
             raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail=f"Category with name '{category_in.name}' already exists.")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Failed to create category.")

@router.get( # Changed to @router
    "/categories/", # Added /categories prefix
    response_model=List[CategoryResponse],
    summary="List all categories",
    tags=["Categories"] # Added Categories tag
)
async def list_categories(
    # TODO: Implement pagination for categories if needed, similar to list_inventory_items
    # page: int = Query(1, ge=1, description="Page number"),
    # size: int = Query(10, ge=1, le=100, description="Number of items per page")
):
    """
    Retrieve a list of all categories.
    """
    # offset = (page - 1) * size # Add if pagination is desired
    # categories = await Category.all().offset(offset).limit(size).order_by('name') # Add if pagination is desired
    categories = await Category.all().order_by('name')
    return [to_category_response(cat) for cat in categories]

@router.get( # Changed to @router
    "/categories/{category_public_id}", # Added /categories prefix
    response_model=CategoryResponse,
    summary="Get a specific category by its public ID",
    tags=["Categories"] # Added Categories tag
)
async def get_category(category_public_id: str):
    """
    Get a single category by its `public_id`.
    """
    category = await Category.get_or_none(public_id=category_public_id)
    if not category:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Category not found"
        )
    return to_category_response(category)

@router.put( # Changed to @router
    "/categories/{category_public_id}", # Added /categories prefix
    response_model=CategoryResponse,
    summary="Update a category",
    tags=["Categories"] # Added Categories tag
)
async def update_category(
    category_public_id: str,
    category_in: CategoryUpdate,
    current_admin: Annotated[User, Depends(auth.get_current_active_admin_user)]
):
    """
    Update a category's name or description.
    Only updates fields provided in the request body.
    """
    category = await Category.get_or_none(public_id=category_public_id)
    if not category:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Category not found"
        )

    update_data = category_in.model_dump(exclude_unset=True)
    if not update_data:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="No fields provided for update"
        )

    for key, value in update_data.items():
        setattr(category, key, value)

    try:
        await category.save()
        return to_category_response(category)
    except Exception as e: # Catching generic exception, ideally more specific
        logger.error(f"Error updating category {category_public_id}: {e}", exc_info=True)
        if "UNIQUE constraint failed" in str(e): # Basic check for unique constraint
             raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail=f"Category with name '{category_in.name}' already exists.")
        raise HTTPException(status_code=status.HTTP_500_INTERNAL_SERVER_ERROR, detail="Failed to update category.")


@router.delete( # Changed to @router
    "/categories/{category_public_id}", # Added /categories prefix
    status_code=status.HTTP_204_NO_CONTENT,
    summary="Delete a category",
    tags=["Categories"] # Added Categories tag
)
async def delete_category(
    category_public_id: str,
    current_admin: Annotated[User, Depends(auth.get_current_active_admin_user)]
):
    """
    Delete a category.
    Inventory items associated with this category will have their category field set to NULL.
    """
    category = await Category.get_or_none(public_id=category_public_id)
    if not category:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Category not found"
        )

    # Note: The relationship InventoryItem.category is SET_NULL on delete,
    # so Tortoise ORM handles unlinking. If it were RESTRICT, we'd need to check.
    await category.delete()
    return None

# Comments about category_router registration are no longer relevant as it's merged.
